
GPIO_RGB_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  0800037c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  0800037c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000384  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000388  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000388  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001030  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000646  00000000  00000000  0002105d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000216a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001530a  00000000  00000000  00021a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e4f  00000000  00000000  00036d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b7c2  00000000  00000000  00038b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b432b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005a0  00000000  00000000  000b437c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000364 	.word	0x08000364

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000364 	.word	0x08000364

0800014c <_ZN3HAL3LEDC1EP12GPIO_TypeDefh>:
	class LED{
		private:
			GPIO_TypeDef * GPIO;
			uint8_t pin;
		public:
			LED(GPIO_TypeDef * GPIOx, uint8_t pinx)
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	71fb      	strb	r3, [r7, #7]
			:GPIO(GPIOx),pin(pinx){
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	68ba      	ldr	r2, [r7, #8]
 800015e:	601a      	str	r2, [r3, #0]
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	79fa      	ldrb	r2, [r7, #7]
 8000164:	711a      	strb	r2, [r3, #4]
				GPIO->CRL = (3 << pin*4);
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	791b      	ldrb	r3, [r3, #4]
 800016a:	009b      	lsls	r3, r3, #2
 800016c:	2203      	movs	r2, #3
 800016e:	409a      	lsls	r2, r3
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	601a      	str	r2, [r3, #0]
				GPIO->ODR = ~(1 << pin);
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	791b      	ldrb	r3, [r3, #4]
 800017a:	461a      	mov	r2, r3
 800017c:	2301      	movs	r3, #1
 800017e:	4093      	lsls	r3, r2
 8000180:	43da      	mvns	r2, r3
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	60da      	str	r2, [r3, #12]
			}
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	4618      	mov	r0, r3
 800018c:	3714      	adds	r7, #20
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <_ZN3HAL3LED6LED_ONEv>:
			void LED_ON(){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
				GPIO->ODR = (1 << pin);
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	791b      	ldrb	r3, [r3, #4]
 80001a0:	461a      	mov	r2, r3
 80001a2:	2301      	movs	r3, #1
 80001a4:	fa03 f202 	lsl.w	r2, r3, r2
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	60da      	str	r2, [r3, #12]
			}
 80001ae:	bf00      	nop
 80001b0:	370c      	adds	r7, #12
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <_ZN3HAL3LED7LED_OFFEv>:
			void LED_OFF(){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
				GPIO->ODR = (0 << pin);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	60da      	str	r2, [r3, #12]
			}
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
	...

080001d4 <main>:

	};
}
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA from RCC APB2ENR
	RCC->APB2ENR = (1<<2);//O/I port clock enable
 80001da:	4b19      	ldr	r3, [pc, #100]	; (8000240 <main+0x6c>)
 80001dc:	2204      	movs	r2, #4
 80001de:	619a      	str	r2, [r3, #24]
	//Configure PA1 as an output pin
	//GPIOA->CRL = (3<<4)|(3<<8);
	HAL::LED led(GPIOA,2);
 80001e0:	463b      	mov	r3, r7
 80001e2:	2202      	movs	r2, #2
 80001e4:	4917      	ldr	r1, [pc, #92]	; (8000244 <main+0x70>)
 80001e6:	4618      	mov	r0, r3
 80001e8:	f7ff ffb0 	bl	800014c <_ZN3HAL3LEDC1EP12GPIO_TypeDefh>
	GPIOC->CRH = (3<<4)|(3<<8);
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <main+0x74>)
 80001ee:	f44f 724c 	mov.w	r2, #816	; 0x330
 80001f2:	605a      	str	r2, [r3, #4]
	while (1)
	{
		GPIOC->ODR = (1<<13) ;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <main+0x74>)
 80001f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001fa:	60da      	str	r2, [r3, #12]
		led.LED_ON();
 80001fc:	463b      	mov	r3, r7
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffc8 	bl	8000194 <_ZN3HAL3LED6LED_ONEv>
		for(int i=0; i<1000000;i++)
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	4a10      	ldr	r2, [pc, #64]	; (800024c <main+0x78>)
 800020c:	4293      	cmp	r3, r2
 800020e:	dc04      	bgt.n	800021a <main+0x46>
			__asm("nop");
 8000210:	bf00      	nop
		for(int i=0; i<1000000;i++)
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	e7f6      	b.n	8000208 <main+0x34>
		GPIOC->ODR = (0<<13);
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x74>)
 800021c:	2200      	movs	r2, #0
 800021e:	60da      	str	r2, [r3, #12]
		led.LED_OFF();
 8000220:	463b      	mov	r3, r7
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffc8 	bl	80001b8 <_ZN3HAL3LED7LED_OFFEv>
		for(int i=0; i<1000000;i++)
 8000228:	2300      	movs	r3, #0
 800022a:	60bb      	str	r3, [r7, #8]
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	4a07      	ldr	r2, [pc, #28]	; (800024c <main+0x78>)
 8000230:	4293      	cmp	r3, r2
 8000232:	dcdf      	bgt.n	80001f4 <main+0x20>
			__asm("nop");
 8000234:	bf00      	nop
		for(int i=0; i<1000000;i++)
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	3301      	adds	r3, #1
 800023a:	60bb      	str	r3, [r7, #8]
 800023c:	e7f6      	b.n	800022c <main+0x58>
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000
 8000244:	40010800 	.word	0x40010800
 8000248:	40011000 	.word	0x40011000
 800024c:	000f423f 	.word	0x000f423f

08000250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000254:	e7fe      	b.n	8000254 <NMI_Handler+0x4>

08000256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800025a:	e7fe      	b.n	800025a <HardFault_Handler+0x4>

0800025c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000260:	e7fe      	b.n	8000260 <MemManage_Handler+0x4>

08000262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000266:	e7fe      	b.n	8000266 <BusFault_Handler+0x4>

08000268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800026c:	e7fe      	b.n	800026c <UsageFault_Handler+0x4>

0800026e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr

08000286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr

08000292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000296:	f000 f82f 	bl	80002f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}

0800029e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
	...

080002ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002ae:	490d      	ldr	r1, [pc, #52]	; (80002e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002d2:	f7ff ffe4 	bl	800029e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002d6:	f000 f821 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff7b 	bl	80001d4 <main>
  bx lr
 80002de:	4770      	bx	lr
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002e8:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 80002ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002f0:	20000024 	.word	0x20000024

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>
	...

080002f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <HAL_IncTick+0x1c>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <HAL_IncTick+0x20>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4413      	add	r3, r2
 8000308:	4a03      	ldr	r2, [pc, #12]	; (8000318 <HAL_IncTick+0x20>)
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	20000000 	.word	0x20000000
 8000318:	20000020 	.word	0x20000020

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	2600      	movs	r6, #0
 8000320:	4d0c      	ldr	r5, [pc, #48]	; (8000354 <__libc_init_array+0x38>)
 8000322:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	f000 f81a 	bl	8000364 <_init>
 8000330:	2600      	movs	r6, #0
 8000332:	4d0a      	ldr	r5, [pc, #40]	; (800035c <__libc_init_array+0x40>)
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <__libc_init_array+0x44>)
 8000336:	1b64      	subs	r4, r4, r5
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
